#include "DTriangulation.cpp"
#include "gtest/gtest.h"

TEST(DTriangulation, Triangulation1_1)
{
	std::vector<unsigned int> input{
		3, 3, 3, 3, 4, 4, 4, 4,
		3, 2, 3, 3, 4, 4, 2, 4,
		3, 3, 3, 3, 4, 4, 4, 4,
		3, 3, 3, 3, 4, 4, 4, 4,
		5, 5, 5, 5, 6, 6, 6, 6,
		5, 5, 5, 5, 6, 6, 6, 6,
		5, 2, 5, 5, 6, 6, 2, 6,
		5, 5, 5, 5, 6, 6, 6, 6
	};

	std::vector<unsigned int> output1{
		3, 3, 3, 3, 4, 4, 4, 4,
		3, 1, 1, 1, 1, 1, 1, 4,
		3, 1, 1, 3, 4, 1, 1, 4,
		3, 1, 3, 1, 1, 4, 1, 4,
		5, 1, 5, 1, 1, 6, 1, 6,
		5, 1, 1, 5, 6, 1, 1, 6,
		5, 1, 1, 1, 1, 1, 1, 6,
		5, 5, 5, 5, 6, 6, 6, 6
	};

	auto algo = std::make_shared<DTriangulation>();
	auto mat = algo->Perform(input);
	EXPECT_EQ(mat, output1);
}

TEST(DTriangulation, Triangulation1_2)
{
	std::vector<unsigned int> input{
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
		3, 3, 2, 3, 3, 3, 3, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		3, 3, 3, 3, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 5, 5, 7, 7, 7, 7, 7, 7, 7,
		6, 6, 6, 6, 2, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 2, 7,
		6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7,
		9, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
		9, 9, 9, 6, 6, 6, 6, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
		9, 9, 9, 9, 9, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
		9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
		9, 2, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7,
		9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7
	};

	std::vector<unsigned int> output1{
	3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	3, 3, 1, 3, 3, 3, 3, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	3, 3, 1, 3, 3, 3, 3, 4, 4, 4, 1, 1, 4, 4, 1, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	3, 3, 1, 3, 3, 3, 3, 4, 4, 1, 4, 1, 4, 4, 4, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5,
	3, 3, 3, 1, 3, 3, 3, 4, 4, 1, 4, 1, 4, 4, 4, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5,
	3, 3, 3, 1, 3, 3, 3, 4, 1, 4, 4, 1, 4, 4, 4, 5, 5, 5, 1, 1, 5, 5, 5, 5, 5,
	3, 3, 3, 1, 6, 6, 6, 6, 1, 4, 4, 1, 4, 4, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5,
	6, 6, 6, 1, 6, 6, 6, 1, 6, 6, 4, 1, 4, 5, 5, 5, 5, 5, 5, 1, 1, 5, 5, 5, 5,
	6, 6, 6, 1, 6, 6, 1, 6, 6, 6, 8, 1, 8, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 7,
	6, 6, 6, 1, 6, 6, 1, 6, 6, 6, 8, 1, 8, 8, 5, 5, 5, 1, 5, 5, 5, 1, 7, 7, 7,
	6, 6, 6, 6, 1, 1, 6, 6, 6, 6, 8, 1, 8, 8, 8, 5, 1, 5, 5, 5, 7, 7, 1, 7, 7,
	6, 6, 6, 6, 1, 1, 6, 6, 6, 8, 8, 1, 8, 8, 8, 1, 5, 5, 7, 7, 7, 7, 1, 7, 7,
	6, 6, 6, 6, 1, 1, 6, 6, 6, 8, 8, 1, 8, 8, 1, 8, 8, 7, 7, 7, 7, 1, 1, 1, 7,
	6, 6, 6, 6, 1, 6, 1, 1, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 1, 1, 1, 7, 7, 7, 7,
	9, 6, 6, 1, 6, 6, 6, 6, 1, 1, 8, 1, 1, 1, 1, 1, 1, 8, 7, 7, 7, 7, 7, 7, 7,
	9, 9, 9, 1, 6, 6, 6, 8, 8, 8, 1, 1, 1, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
	9, 9, 1, 9, 9, 6, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
	9, 9, 1, 1, 1, 1, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7,
	9, 1, 1, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7,
	9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7
	};

	auto algo = std::make_shared<DTriangulation>();
	auto mat = algo->Perform(input);
	EXPECT_EQ(mat, output1);
}